import numpy as np

class ReferenceTrajectory(object):
    def __init__(self, curve="spiral", ts=0.1, N=5000, space=[0.5,0.5,1.5], tscale=0.1):
        """Create object of reference trajetcory

        Args:
            curve (str, optional): figure8 or spiral. Defaults to "figure8".
            ts (float, optional): sampling period of reference trajectory. Defaults to 0.01.
            N (int, optional): number of samples. Defaults to 50000.
            space (float, optional): size of flight space in m. Defaults to 2.
        """
        self.t = np.cumsum(ts*np.ones(N))
        self.tscale = tscale
        if hasattr(space, "__len__"):
            self.space = space
        else:
            self.space = np.array([space, space, space])
        if hasattr(tscale, "__len__"):
            self.tscale = tscale
        else:
            self.tscale = np.array([tscale, tscale, tscale])
        self.curve = curve
        if self.curve == "figure8":
            self.figure8()
        else:
            self.spiral()

    def figure8(self):
        """Lemniscate of Gerono/Figure8 trajectory"""
        self.x = self.space[0]*np.cos(self.tscale[0]*self.t)
        self.y = self.space[1]*np.sin(self.tscale[1]*2*self.t) / 2
        self.z = np.linspace(0.3,self.space[2],len(self.t))


    def spiral(self):
        """Spiral trajectory"""
        self.x = self.space[0]*np.cos(self.tscale[0]*self.t)
        self.y = self.space[1]*np.sin(self.tscale[1]*self.t)
        self.z = np.linspace(0.3,self.space[2],len(self.t))
        
    def get_polynomial_traj(self):
        # # Define waypoints as an array
        # waypoints = np.array([[x1, y1, t1], [x2, y2, t2], [x3, y3, t3], ...])

        # Calculate polynomial coefficients
        coefficients_x = np.polyfit(self.t, self.x,7)
        coefficients_y = np.polyfit(self.t, self.y,7)
        coefficients_z = np.polyfit(self.t, self.z,7)
        
        trajectory = np.array([coefficients_x,coefficients_y,coefficients_z])
        
        return trajectory
    

if __name__ == '__main__':
    ref = ReferenceTrajectory("spiral", ts=0.1, N=5000, space=[0.5,0.5,1.5], tscale=0.1)
    traj = ref.get_polynomial_traj()
    print(traj)

traj_poly = [[2, 0.0, 0.0, 0.0, 0.0, 1.09375, -1.3125, 0.546875, -0.078125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.5, 0.0, 0.0, 3.642919299551295e-16, 1.8214596497756474e-16, 6.830473686658678e-17, -8.538092108323347e-18, 1.0672615135404184e-18, 0.0, 0.0, 0.0, 0.0, 1.09375, -1.3125, 0.546875, -0.078125, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.5, 0.0, 0.0, 3.642919299551295e-16, -1.0937499999999998, 1.3125, -0.546875, 0.078125, 0.5, 0.0, 0.0, 3.642919299551295e-16, 1.8214596497756474e-16, 6.830473686658678e-17, -8.538092108323347e-18, 1.0672615135404184e-18, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 3.642919299551295e-16, -1.0937499999999998, 1.3125, -0.546875, 0.078125, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.0, 0.0, 0.0, 0.0, 0.874999999999999, -0.9187499999999985, 0.34999999999999937, -0.04687499999999991, 0.0, 0.0, 0.0, 0.0, -1.3125000000000002, 1.7062500000000003, -0.7437500000000001, 0.10937500000000003, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 1.0, 0.7000000000000006, 0.0, 4.371503159461554e-15, -0.43749999999999845, 0.262499999999991, -0.043749999999993724, -1.1675840958132178e-15, 0.0, 0.7, 0.0, 3.642919299551295e-16, -0.8750000000000014, 1.050000000000002, -0.4375000000000009, 0.06250000000000011, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 1.0, -0.6999999999999998, 0.0, 5.100087019371813e-15, 0.8749999999999901, -1.0499999999999927, 0.4374999999999975, -0.0624999999999997, 1.0, 0.7000000000000006, 0.0, 4.371503159461554e-15, -0.43749999999999845, 0.262499999999991, -0.043749999999993724, -1.1675840958132178e-15, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.0, -0.7, 0.0, -3.642919299551295e-16, 1.7500000000000002, -1.9687500000000007, 0.7875000000000003, -0.10937500000000003, 1.0, -0.6999999999999998, 0.0, 5.100087019371813e-15, -0.43750000000001005, 0.6562500000000075, -0.3062500000000026, 0.046875000000000326, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 0.0, 0.0, 0.0, 0.0, -0.4375000000000062, 0.7875000000000094, -0.3937500000000047, 0.06250000000000079, 0.0, 0.0, 0.0, 0.0, -2.6250000000000004, 3.4125000000000005, -1.4875000000000003, 0.21875000000000006, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ],  # noqa
  [2, 1.0, 1.3999999999999997, 0.0, -8.743006318923108e-15, -2.449999999999983, 2.729999999999987, -1.1112499999999959, 0.15749999999999967, 0.0, 1.4, 0.0, 7.28583859910259e-16, -5.5125, 6.930000000000001, -2.9925000000000006, 0.43875, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 0.0, 0.0, 0.0, 0.0, 4.375, -5.25, 2.1875, -0.3125, ],  # noqa
  [2, 1.0, -1.3999999999999997, -1.2600000000000011, 2.185751579730777e-15, 7.087499999999999, -7.874999999999999, 3.15, -0.43875, 1.0, 1.3999999999999997, -1.2600000000000011, -7.28583859910259e-16, 2.2750000000000017, -2.6249999999999996, 1.0937499999999991, -0.15749999999999964, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, 2.0, 0.0, 0.0, 1.457167719820518e-15, -8.749999999999998, 10.5, -4.375, 0.625, ],  # noqa
  [2, 0.0, -1.4, 0.0, -7.28583859910259e-16, 3.5000000000000004, -3.9375000000000013, 1.5750000000000006, -0.21875000000000006, 1.0, -1.3999999999999997, -2.3314683517128287e-15, 1.8214596497756474e-16, 1.3125000000000047, -1.312500000000005, 0.48125000000000184, -0.06250000000000024, 1.0, 0.0, 0.0, 7.28583859910259e-16, 3.642919299551295e-16, 1.3660947373317356e-16, -1.7076184216646695e-17, 2.134523027080837e-18, -2.0, 0.0, 0.0, -1.457167719820518e-15, 4.374999999999999, -5.25, 2.1875, -0.3125, ]]  # noqa